露天矿多车协同调度系统 - utils目录类与函数概览
配置管理 (config.py)
数据类

MapConfig: 地图和环境配置

get_key_location(key: str) -> List[float]


VehicleConfig: 车辆配置参数

get_vehicle_spec(vehicle_type: str) -> Dict[str, Any]


AlgorithmConfig: 算法配置参数
LoggingConfig: 日志配置参数
UIConfig: 用户界面配置参数
SystemConfig: 系统总体配置，包含所有其他配置部分

配置管理类

ConfigManager:

__init__(config_path: Optional[str] = None)
_auto_discover_and_load() -> bool
load_config(path: str) -> None
save_config(path: Optional[str] = None) -> None
as_dict() -> Dict[str, Any]
update_from_dict(config_dict: Dict[str, Any]) -> None
add_listener(listener: Callable[[str], None]) -> None
remove_listener(listener: Callable[[str], None]) -> None
_notify_listeners(section: str) -> None
get_config() -> SystemConfig
get_map_config() -> MapConfig
get_vehicle_config() -> VehicleConfig
get_algorithm_config() -> AlgorithmConfig
get_logging_config() -> LoggingConfig
get_ui_config() -> UIConfig
get(section: str, key: str, default: Any = None) -> Any
set(section: str, key: str, value: Any) -> bool
override_from_env(prefix: str = "DISPATCH_") -> None



全局函数

get_config() -> SystemConfig
load_config(path: str) -> None
save_config(path: Optional[str] = None) -> None
get(section: str, key: str, default: Any = None) -> Any
set(section: str, key: str, value: Any) -> bool
add_listener(listener: Callable[[str], None]) -> None
remove_listener(listener: Callable[[str], None]) -> None

几何模块 (geo)
coordinates.py
基础点类

BasePoint: 所有点类型的基类

distance_to(other: 'BasePoint') -> float (抽象)
as_tuple() -> tuple (抽象)



2D点类

Point2D(BasePoint):

__init__(x: float, y: float)
distance_to(other: 'Point2D') -> float
as_tuple() -> Tuple[float, float]
from_tuple(coords: Tuple[float, float]) -> 'Point2D' (类方法)
from_any(point: Union[Tuple[float, float], List[float], 'Point2D', 'Point3D']) -> 'Point2D' (类方法)
midpoint(other: 'Point2D') -> 'Point2D'
translate(dx: float, dy: float) -> 'Point2D'



3D点类

Point3D(BasePoint):

__init__(x: float, y: float, z: float)
distance_to(other: 'Point3D') -> float
as_tuple() -> Tuple[float, float, float]
to_2d() -> Point2D
from_tuple(coords: Tuple[float, float, float]) -> 'Point3D' (类方法)
from_2d(point: Point2D, z: float = 0.0) -> 'Point3D' (类方法)
from_any(point: Union[Tuple, List, 'Point2D', 'Point3D'], default_z: float = 0.0) -> 'Point3D' (类方法)



边界框类

BoundingBox:

__init__(min_point: Point2D, max_point: Point2D)
属性: width, height, area, center
contains_point(point: Point2D) -> bool
intersects(other: 'BoundingBox') -> bool
from_points(points: List[Point2D]) -> 'BoundingBox' (类方法)
expand(margin: float) -> 'BoundingBox'



工具函数

normalize_to_point2d(coord: Union[tuple, list, Point2D, Point3D, object]) -> Point2D
normalize_to_point3d(coord: Union[tuple, list, Point2D, Point3D, object], default_z: float = 0.0) -> Point3D

distances.py
距离计算函数

euclidean_distance_2d(p1: Union[Tuple, List, Point2D], p2: Union[Tuple, List, Point2D]) -> float
euclidean_distance_3d(p1: Union[Tuple, List, Point2D, Point3D], p2: Union[Tuple, List, Point2D, Point3D]) -> float
manhattan_distance(p1: Union[Tuple, List, Point2D], p2: Union[Tuple, List, Point2D]) -> float
cached_distance(p1: Tuple[float, float], p2: Tuple[float, float]) -> float
weighted_distance(p1: Point2D, p2: Point2D, weights: Tuple[float, float] = (1.0, 1.0)) -> float
path_length(points: List[Union[Point2D, Tuple, List]], distance_func: DistanceFunc = euclidean_distance_2d) -> float

线段和多边形距离计算

point_to_segment_distance(p: Point2D, segment_start: Point2D, segment_end: Point2D) -> float
segment_to_segment_distance(s1_start: Point2D, s1_end: Point2D, s2_start: Point2D, s2_end: Point2D) -> float
segments_intersect(s1_start: Point2D, s1_end: Point2D, s2_start: Point2D, s2_end: Point2D) -> bool
haversine_distance(lat1: float, lon1: float, lat2: float, lon2: float) -> float
point_to_polygon_distance(point: Point2D, polygon: List[Point2D]) -> float
point_in_polygon(point: Point2D, polygon: List[Point2D]) -> bool

transforms.py
坐标变换类

CoordinateTransformer:

__init__(grid_size: float = 1.0, origin: Point2D = None)
configure(grid_size: float = None, origin: Point2D = None) -> None
grid_to_meters(grid_point: Union[Point2D, Tuple, List]) -> Point2D
meters_to_grid(meter_point: Union[Point2D, Tuple, List]) -> Point2D
meters_to_grid_rounded(meter_point: Union[Point2D, Tuple, List]) -> Point2D



坐标变换函数

rotate_point(point: Point2D, angle_rad: float, origin: Point2D = None) -> Point2D
rotate_path(path: List[Point2D], angle_rad: float, origin: Point2D = None) -> List[Point2D]
scale_point(point: Point2D, scale_x: float, scale_y: float = None, origin: Point2D = None) -> Point2D
transform_point(point: Point2D, transform_matrix: np.ndarray) -> Point2D
transform_path(path: List[Point2D], transform_matrix: np.ndarray) -> List[Point2D]
create_transformation_matrix(translation: Tuple[float, float] = (0, 0), rotation: float = 0, scale: Tuple[float, float] = (1, 1)) -> np.ndarray

路径处理函数

discretize_points(path: List[Point2D], grid_size: float = 1.0) -> List[Point2D]
interpolate_points(start: Point2D, end: Point2D, num_points: int = 10) -> List[Point2D]
bresenham_line(start: Point2D, end: Point2D) -> List[Point2D]

坐标系转换函数

world_to_local(point: Point2D, reference: Point2D, reference_heading: float) -> Point2D
local_to_world(point: Point2D, reference: Point2D, reference_heading: float) -> Point2D

网格地图类

GridMap:

__init__(origin: Point2D = None, cell_size: float = 1.0)
world_to_grid(point: Point2D) -> Tuple[int, int]
grid_to_world(row: int, col: int) -> Point2D
world_to_grid_continuous(point: Point2D) -> Point2D
grid_continuous_to_world(point: Point2D) -> Point2D
get_cell_bounds(row: int, col: int) -> Tuple[Point2D, Point2D]



输入输出模块 (io)
file_utils.py
异常类

FileError(Exception)
FileNotFoundError(FileError)
FileAccessError(FileError)
FileFormatError(FileError)
FileWriteError(FileError)
FileLockError(FileError)

文件操作上下文管理器

safe_open(file_path: Union[str, Path], mode: str = 'r', encoding: Optional[str] = None, **kwargs) -> Iterator[Union[TextIO, BinaryIO]]

基本文件读写函数

read_text_file(file_path: Union[str, Path], encoding: str = 'utf-8') -> str
write_text_file(file_path: Union[str, Path], content: str, encoding: str = 'utf-8', create_dirs: bool = True) -> None
read_binary_file(file_path: Union[str, Path]) -> bytes
write_binary_file(file_path: Union[str, Path], data: bytes, create_dirs: bool = True) -> None

结构化文件读写函数

read_json_file(file_path: Union[str, Path], encoding: str = 'utf-8') -> Dict[str, Any]
write_json_file(file_path: Union[str, Path], data: Any, indent: int = 4, encoding: str = 'utf-8') -> None
read_yaml_file(file_path: Union[str, Path], encoding: str = 'utf-8') -> Dict[str, Any]
write_yaml_file(file_path: Union[str, Path], data: Any, encoding: str = 'utf-8') -> None
read_csv_file(file_path: Union[str, Path], delimiter: str = ',', has_header: bool = True, encoding: str = 'utf-8') -> List[Dict[str, str]]
write_csv_file(file_path: Union[str, Path], data: List[Dict[str, Any]], fieldnames: Optional[List[str]] = None, delimiter: str = ',', encoding: str = 'utf-8') -> None

文件属性和格式函数

get_file_extension(file_path: Union[str, Path]) -> str
get_mime_type(file_path: Union[str, Path]) -> str
detect_file_format(file_path: Union[str, Path]) -> str
calculate_file_hash(file_path: Union[str, Path], algorithm: str = 'sha256') -> str

目录操作函数

create_directory(directory_path: Union[str, Path], exists_ok: bool = True) -> None
list_files(directory_path: Union[str, Path], pattern: str = '*', recursive: bool = False) -> List[str]

文件操作函数

copy_file(source_path: Union[str, Path], target_path: Union[str, Path], overwrite: bool = True) -> None
move_file(source_path: Union[str, Path], target_path: Union[str, Path], overwrite: bool = True) -> None
delete_file(file_path: Union[str, Path], ignore_missing: bool = True) -> bool

压缩文件操作

create_zip_archive(file_paths: List[Union[str, Path]], archive_path: Union[str, Path]) -> None
extract_zip_archive(archive_path: Union[str, Path], target_dir: Union[str, Path]) -> List[str]

文件锁

FileLock:

__init__(lock_file: Union[str, Path], timeout: float = 10.0, retry_interval: float = 0.1)
acquire() -> bool
release() -> None

serialization.py
异常类

SerializationError(Exception)
DeserializationError(Exception)

JSON编解码器

JSONEncoder(json.JSONEncoder): 自定义JSON编码器

default(self, obj)


JSONDecoder(json.JSONDecoder): 自定义JSON解码器

__init__(self, *args, **kwargs)
register_type(self, type_name: str, cls: Type[T]) -> None
object_hook(self, obj: Dict[str, Any]) -> Any



序列化函数

to_json(obj: Any, pretty: bool = False, ensure_ascii: bool = False) -> str
from_json(json_str: str, custom_types: Dict[str, Type] = None) -> Any
to_yaml(obj: Any, flow_style: bool = False) -> str
from_yaml(yaml_str: str, custom_types: Dict[str, Type] = None) -> Any
to_pickle(obj: Any) -> bytes
from_pickle(data: bytes) -> Any
to_base64(obj: Any) -> str
from_base64(data: str) -> Any

NumPy数组序列化

serialize_numpy_array(arr: np.ndarray) -> Dict[str, Any]
deserialize_numpy_array(data: Dict[str, Any]) -> np.ndarray

序列化工具函数

is_serializable(obj: Any) -> bool
make_serializable(obj: Any) -> Any
to_serializable_dict(obj: Any) -> Dict[str, Any]
register_custom_types()

可序列化基类

Serializable: 可序列化对象的混入类

to_dict(self) -> Dict[str, Any]
to_json(self, pretty: bool = False) -> str
to_yaml(self) -> str
to_pickle(self) -> bytes
to_base64(self) -> str
from_dict(cls, data: Dict[str, Any]) -> 'Serializable' (类方法)
from_json(cls, json_str: str) -> 'Serializable' (类方法)
from_yaml(cls, yaml_str: str) -> 'Serializable' (类方法)
from_pickle(cls, data: bytes) -> 'Serializable' (类方法)
from_base64(cls, data: str) -> 'Serializable' (类方法)



日志模块 (logger.py)
枚举类

LogLevel(Enum): 日志级别枚举

日志格式化器

LogFormatter(logging.Formatter): 自定义日志格式化器

__init__(fmt: str = None, datefmt: str = None, use_colors: bool = True)
format(record: logging.LogRecord) -> str



性能追踪

PerformanceTracker: 性能度量追踪器

__init__(self)
start_timer(self, operation: str) -> int
stop_timer(self, operation: str, timer_id: int) -> float
get_metrics(self, operation: Optional[str] = None) -> Dict[str, Any]
reset(self, operation: Optional[str] = None) -> None



日志管理器

LogManager: 中心化日志管理器

__init__(self, config: Optional[LoggingConfig] = None)
_setup_console_handler(self) -> None
_setup_file_handler(self) -> None
_on_config_changed(self, section: str) -> None
_reconfigure_logging(self) -> None
get_logger(self, name: str) -> logging.Logger
start_timer(self, operation: str) -> int
stop_timer(self, operation: str, timer_id: int) -> float
get_performance_metrics(self, operation: Optional[str] = None) -> Dict[str, Any]
reset_performance_metrics(self, operation: Optional[str] = None) -> None
_cleanup(self) -> None



装饰器

timed(operation: str): 函数执行时间追踪装饰器
log_exceptions(logger_name: str = "exceptions"): 异常日志记录装饰器

全局函数

get_logger(name: str) -> logging.Logger
start_timer(operation: str) -> int
stop_timer(operation: str, timer_id: int) -> float
get_performance_metrics(operation: Optional[str] = None) -> Dict[str, Any]
reset_performance_metrics(operation: Optional[str] = None) -> None

数学模块 (math)
trajectories.py
枚举类

PathSmoothingMethod(Enum): 路径平滑方法枚举

BEZIER, SPLINE, MOVING_AVERAGE


PathType(Enum): 路径/轨迹类型枚举

STRAIGHT_LINE, BEZIER_CURVE, SPLINE, REEDS_SHEPP, DUBINS, HYBRID



路径类

Path: 路径表示

__init__(points: List[Union[Point2D, Tuple[float, float]]], path_type: PathType = PathType.STRAIGHT_LINE, metadata: dict = None)
属性: length, start_point, end_point
方法:

append(point: Union[Point2D, Tuple[float, float]]) -> None
extend(points: List[Union[Point2D, Tuple[float, float]]]) -> None
reverse() -> 'Path'
subsample(step: int = 1) -> 'Path'
resample_by_distance(distance: float) -> 'Path'
smooth(method: PathSmoothingMethod = PathSmoothingMethod.SPLINE, smoothing_factor: float = 0.5, num_points: int = 100) -> 'Path'
私有方法: _smooth_bezier, _smooth_spline, _smooth_moving_average





轨迹类

Trajectory(Path): 扩展路径，包含时间信息

__init__(points: List[Union[Point2D, Tuple[float, float]]], timestamps: List[float] = None, velocities: List[float] = None, path_type: PathType = PathType.STRAIGHT_LINE, metadata: dict = None)
属性: duration, average_velocity
方法:

position_at_time(time: float) -> Optional[Point2D]
velocity_at_time(time: float) -> Optional[float]
heading_at_time(time: float) -> Optional[float]
from_path_with_velocity(path: Path, velocity: float) -> 'Trajectory' (类方法)
from_path_with_acceleration(path: Path, initial_velocity: float, acceleration: float, max_velocity: float = float('inf')) -> 'Trajectory' (类方法)





路径生成函数

generate_straight_line_path(start: Point2D, end: Point2D, num_points: int = 10) -> Path
generate_circular_arc_path(center: Point2D, radius: float, start_angle: float, end_angle: float, num_points: int = 36) -> Path
generate_bezier_path(control_points: List[Point2D], num_points: int = 100) -> Path
generate_s_curve_path(start: Point2D, end: Point2D, curve_height: float, num_points: int = 100) -> Path

路径处理函数

resample_path_by_curvature(path: Path, base_distance: float = 1.0, curvature_factor: float = 0.5, min_points: int = 10) -> Path
signed_angle_2d(v1: Vector2D, v2: Vector2D) -> float
calculate_path_curvature(path: Path) -> List[float]
merge_paths(paths: List[Path], connect: bool = True) -> Path

vectors.py
2D向量类

Vector2D:

__init__(x: float, y: float)
运算符重载: __add__, __sub__, __mul__, __rmul__, __truediv__, __neg__
属性: magnitude, magnitude_squared, normalized
方法:

dot(other: 'Vector2D') -> float
cross_scalar(other: 'Vector2D') -> float
angle_with(other: 'Vector2D') -> float
rotate(angle_rad: float) -> 'Vector2D'
project_onto(other: 'Vector2D') -> 'Vector2D'
perpendicular() -> 'Vector2D'
distance_to_line(line_start: Point2D, line_end: Point2D) -> float
to_point2d() -> Point2D
from_points(start: Point2D, end: Point2D) -> 'Vector2D' (类方法)
from_magnitude_angle(magnitude: float, angle_rad: float) -> 'Vector2D' (类方法)





3D向量类

Vector3D:

__init__(x: float, y: float, z: float)
运算符重载: __add__, __sub__, __mul__, __rmul__, __truediv__, __neg__
属性: magnitude, magnitude_squared, normalized
方法:

dot(other: 'Vector3D') -> float
cross(other: 'Vector3D') -> 'Vector3D'
angle_with(other: 'Vector3D') -> float
project_onto(other: 'Vector3D') -> 'Vector3D'
to_point3d() -> Point3D
to_vector2d() -> Vector2D
from_points(start: Point3D, end: Point3D) -> 'Vector3D' (类方法)
from_vector2d(vector2d: Vector2D, z: float = 0.0) -> 'Vector3D' (类方法)





向量工具函数

normal_vector_2d(p1: Point2D, p2: Point2D) -> Vector2D
interpolate_vectors(v1: Vector2D, v2: Vector2D, t: float) -> Vector2D
angle_between_vectors(v1: Vector2D, v2: Vector2D) -> float
signed_angle_2d(v1: Vector2D, v2: Vector2D) -> float
reflect_vector(vector: Vector2D, normal: Vector2D) -> Vector2D